1.面向对象和面向过程的区别
面向过程：性能高
面向对象：性能较低，但易维护、复用、扩展
java性能差的主要原因是：java是半编译语言，最终的执行码并不是可以直接被cpu执行的二进制机器码

2.java语言特点
面向对象、简单易学、跨平台、安全可靠、支持多线程、支持网络编程、编译与解释并存

3.JVM、JDK和JRE的区别
JVM即运行java字节码的虚拟机
              JDK中的javac编译                            JIT编译器
.java文件(源代码)------------->.class文件(JVM可以理解的字节码)--------->二进制机器码
JDK 9 引入了AOT(Ahead Of Time Compilation)直接将字节码编译成机器码，避免了JIT预热等方面的开销
JDK是功能齐全的java SDK，能够创建和编译程序
JRE是java运行时环境，包含运行已编译java程序所需内容的集合

4.Oracle JDK 和 Open JDK的对比

5.Java和C++的区别
java不提供指针直接访问内存，更加安全
java单继承，c++多继承
java有自动内存管理机制，不需要手动释放内存

6.什么是Java程序的主类，应用程序和小程序的主类有什么区别
一个程序中可以有多个类，但是只能有一个主类，主类是程序执行的入口
应用程序的主类是包含main方法的类
小程序的主类是继承JApplet或者Applet的子类

7.Java应用程序和小程序的区别

8.字符型常量和字符串常量的区别

9.构造器Constructor是否可被override

10.override和overload的区别

11.Java面向对象编程三大特性（封装、继承、多态）

12.String、StringBuffer、StringBuilder区别
String用private final char[] value保存数据，所以是不可变的
StringBuffer和StringBuilder继承AbstractStringBuilder,用char[] value保存数据，因此可以改变
二者区别在于StringBuffer采用同步方法实现了线程安全，而StringBuilder不是线程安全，但后者效率要更好一点

13.自动装箱与拆箱

14.在一个静态方法内调用非静态成员是非法的
这是由java类的初始化过程决定的，先初始化的不能调用后初始化的
java初始化顺序：
父类的静态代码块和静态变量
自身的静态代码块和静态变量
父类的代码块和成员变量
父类的构造函数
自身的代码块和成员变量
自身的构造函数
*.类的生命周期：加载->验证->准备->解析->初始化->使用->卸载(违背类生命周期的引用会报“Illegal Forward Reference")
只有在准备和初始化阶段涉及类变量的初始化和赋值

15.在Java中定义一个不做事且没有参数的构造方法的作用

16.import java和import javax的区别

17.接口和抽象类的区别
接口比抽象类更加抽象。
接口中所有方法在接口中不能有实现，抽象类可以有非抽象方法
接口中只能有static、final变量，而抽象类则不一定
接口方法修饰符默认是public，抽象类可以是public、protected、default
一个类可以实现多个接口，但只能实现一个抽象类
从设计层面来讲，抽象类是是对类的抽象，是一种模板设计，接口是对行为的抽象，是一种行为规范

18.成员变量和局部变量的区别
语法形式上：成员变量是属于类的，可以被public、private、static等修饰；局部变量是方法内定义的变量，不能被修饰符修饰
          两者都可以被final修饰
存储位置上：
生存时间上：
自动赋值上：

---------------------------------------------------------------------------------------------------
additions:
1.内部类访问的局部变量必须声明为final
2.子类拥有父类的私有成员和函数，但是不能访问